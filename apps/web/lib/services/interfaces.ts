import { Task, Prisma, ChatMessageRole } from '@prisma/client'
import type { TaskPriority, TaskStage } from '@/types/task'


// Notification enum types from Prisma schema
export type NotificationType = 'Reminder' | 'Question' | 'Info'
export type NotificationMode = 'Push' | 'Email' | 'Chat'
export type NotificationTrigger = 'FixedTime' | 'RelativeTime' | 'Location'
export type NotificationRelativeTimeUnit = 'Minutes' | 'Hours' | 'Days'
export type NotificationAuthor = 'User' | 'Bot' | 'Model'

// Interface for a single sub-task generated by the breakdown AI
export interface SubTaskCreateInput {
  title: string;
  description?: string;
  estimatedTimeMinutes?: number;
  date: string;
  priority: string;
}

// Interface for a single sub-task generated by the breakdown AI
export interface SubTaskUpdateInput {
  id: string;
  title: string;
  description?: string;
  estimatedTimeMinutes?: number;
  date: string;
  priority: string;
}

export interface TaskRefinedNotificationCreateInput {
  id: string;
  message: string;
  author: string;
  mode: NotificationMode;
  type: NotificationType;
  trigger: NotificationTrigger;
  relativeTimeValue?: number;
  relativeTimeUnit?: NotificationRelativeTimeUnit;
  fixedTime?: Date;
}

export interface TaskRefinedNotificationUpdateInput extends TaskRefinedNotificationCreateInput {
  id: string;
}

export interface TaskRefinedData {
  title: string;
  description: string;
  priority: string;
  date: string;
  deadline: string;
  estimatedTimeMinutes: number;
  why: string;
  location: string
  tags: { name: string, category: string }[];
  sub_tasks: {
    create: SubTaskCreateInput[];
    update: SubTaskUpdateInput[];
    removeIds: string[];
  };
  notifications: {
    create: TaskRefinedNotificationCreateInput[];
    update: TaskRefinedNotificationUpdateInput[];
    removeIds: string[];
  }
}

export interface NotificationCreateinput {
  mode: NotificationMode;
  type: NotificationType;
  trigger?: NotificationTrigger;
  message: string;
  relativeTimeValue?: number;
  relativeTimeUnit?: NotificationRelativeTimeUnit;
  fixedTime?: Date;
  author: NotificationAuthor;
}

export interface ChildrenCreateinput {
  title: string;
  description?: string;
}

export interface ChildrenUpdateInput {
  id: string;
  title: string;
  description?: string;
}

export interface CreateTaskInput {
  userId: string;
  title: string;
  description?: string;
  date: Date;
  time?: string;
  deadline?: Date;
  priority?: TaskPriority;
  stage?: "Refinement" | "Breakdown" | "Planning" | "Execution" | "Reflection";
  estimatedTimeMinutes?: number;
  location?: string;
  why?: string;
  parentId?: string;
  tagIds?: string[];
  children?: {
    title: string;
    priority?: string;
    stage?: string;
  }[];
  notifications?: NotificationCreateinput[];
}

export interface NotificationUpdateInput {
  id: string;
  mode?: NotificationMode;
  type?: NotificationType;
  trigger?: NotificationTrigger;
  message?: string;
  relativeTimeValue?: number;
  relativeTimeUnit?: NotificationRelativeTimeUnit;
  fixedTime?: Date;
  author?: NotificationAuthor;
}

export interface UpdateTaskInput {
  id: string;
  userId: string;
  title?: string;
  description?: string;
  date?: Date;
  time?: string;
  deadline?: Date;
  priority?: TaskPriority;
  stage?: "Refinement" | "Breakdown" | "Planning" | "Execution" | "Reflection";
  stageStatus?: "NotStarted" | "InProgress" | "QuestionAsked" | "Completed";
  estimatedTimeMinutes?: number;
  location?: string;
  repeats?: string;
  why?: string;
  tagIds?: string[];
  completed?: boolean,
  children?: {
    create: ChildrenCreateinput[],
    update: ChildrenUpdateInput[],
    removeIds: string[],
  }
  notifications?: {
    create: NotificationCreateinput[],
    update: NotificationUpdateInput[],
    removeIds: string[],
  }
}

export interface ProcessTaskInput {
  id: string;
  userId: string;
  nextStage?: TaskStage
}

export interface ProcessTaskResponse {
  response_type: "message_to_user" | "task_details";
  task: Task | null;
  message: string;
}
