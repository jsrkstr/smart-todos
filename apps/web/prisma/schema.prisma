generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  bio            String?
  gender         String?
  age            Int?
  principles     String[]      @default([])
  inspirations   String[]      @default([])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  settings       Settings?
  tasks          Task[]
  userInsights   UserInsight[]
  logs           Log[]
  notifications  Notification[]
  psychProfile   PsychProfile?
  rewards        Reward[]
  points         Int           @default(0)
  streaks        Streak[]
  flashcards     Flashcard[]
  quizzes        Quiz[]
  competitions   Competition[]  @relation("CompetitionParticipants")
  ownedCompetitions Competition[] @relation("CompetitionOwner")
  accountabilityPartnerships AccountabilityPartnership[] @relation("AccountabilityPartner")
}

model PsychProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  productivityTime    String   // morning, afternoon, evening, night
  communicationPref   String   // minimal, moderate, frequent
  taskApproach       String   // sequential, parallel, varied
  difficultyPreference String // first, alternate, end
  selectedCoach      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model Settings {
  id                String   @id @default(cuid())
  userId            String   @unique
  theme             String   @default("system")
  notifications     Boolean  @default(true)
  emailNotifications Boolean @default(true)
  timezone          String   @default("UTC")
  language          String   @default("en")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model Task {
  id                   String              @id @default(cuid())
  title                String
  date                 DateTime
  time                 String?
  deadline             DateTime?
  dateAdded            DateTime            @default(now())
  completed            Boolean             @default(false)
  priority             String              @default("medium")
  position             Int?
  tags                 Tag[]               @relation("TaskTags")
  estimatedTimeMinutes Int                @default(0)
  repeats              String?
  reminderTime         ReminderTimeOption? @default(at_time)
  location             String?
  why                  String?
  userId               String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  subTasks             SubTask[]
  events               Event[]
  notifications        Notification[]
  pomodoros           Pomodoro[]
  user                 User                @relation(fields: [userId], references: [id])
  reward               Reward?
  points               Int                 @default(0)
  excuses             Excuse[]
  moods               Mood[]
  flashcards          Flashcard[]         @relation("TaskFlashcards")
  quiz                 Quiz?
  status               TaskStatus          @default(new)
}

model SubTask {
  id          String     @id @default(cuid())
  title       String
  status      TaskStatus @default(new)
  position    Int
  taskId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  task        Task       @relation(fields: [taskId], references: [id])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]   @relation("TaskTags")
}

model Event {
  id        String   @id @default(cuid())
  type      String
  data      Json
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  read      Boolean  @default(false)
  userId    String
  taskId    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  task      Task?    @relation(fields: [taskId], references: [id])
}

model Log {
  id        String   @id @default(cuid())
  type      String
  data      Json
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserInsight {
  id        String   @id @default(cuid())
  type      String
  data      Json
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Pomodoro {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model Reward {
  id          String    @id @default(cuid())
  name        String
  description String?
  points      Int       @default(0)
  claimed     Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  taskId      String?   @unique
  task        Task?     @relation(fields: [taskId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Streak {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  type      String
  count     Int         @default(0)
  lastDate  DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Excuse {
  id        String   @id @default(cuid())
  text      String
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model Mood {
  id        String   @id @default(cuid())
  value     Int      // 1-5 scale
  note      String?
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model Flashcard {
  id        String   @id @default(cuid())
  question  String
  answer    String
  userId    String
  taskId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  task      Task?    @relation("TaskFlashcards", fields: [taskId], references: [id])
}

model Quiz {
  id        String       @id @default(cuid())
  title     String
  userId    String
  taskId    String?      @unique
  questions QuizQuestion[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  task      Task?        @relation(fields: [taskId], references: [id])
}

model QuizQuestion {
  id        String   @id @default(cuid())
  question  String
  options   String[]
  answer    String
  quizId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model Competition {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation("CompetitionOwner", fields: [ownerId], references: [id])
  participants User[]  @relation("CompetitionParticipants")
}

model AccountabilityPartnership {
  id          String   @id @default(cuid())
  userId      String
  partnerId   String
  status      String   // pending, active, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("AccountabilityPartner", fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  new
  in_progress
  completed
  cancelled
}

enum ReminderTimeOption {
  at_time
  five_min_before
  fifteen_min_before
  thirty_min_before
  one_hour_before
  one_day_before
}

enum StreakType {
  daily_completion
  weekly_completion
  monthly_completion
}
