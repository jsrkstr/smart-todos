generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  expoPushToken  String?       // Field for storing Expo push notification token
  accounts       Account[]
  sessions       Session[]
  bio            String?
  gender         String?
  age            Int?
  principles     String[]      @default([])
  inspirations   String[]      @default([])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  settings       Settings?
  tasks          Task[]
  chatMessages   ChatMessage[]
  userInsights   UserInsight[]
  logs           Log[]
  notifications  Notification[]
  psychProfile   PsychProfile?
  rewards        Reward[]
  points         Int           @default(0)
  streaks        Streak[]
  flashcards     Flashcard[]
  quizzes        Quiz[]
  competitions   Competition[]  @relation("CompetitionParticipants")
  ownedCompetitions Competition[] @relation("CompetitionOwner")
  accountabilityPartnerships AccountabilityPartnership[] @relation("AccountabilityPartner")
  pomodoros      Pomodoro[]
  calendarConnections CalendarConnection[]
}

model Coach {
  id                String   @id @default(cuid())
  name              String
  title             String?
  image             String?  @default("/placeholder.svg?height=100&width=100")
  description       String?
  style             String?
  type              String   @default("system") // system, custom
  matchScore        Int?
  sampleQuotes      String[] @default([])
  principles        String[] @default([])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  users             PsychProfile[]
  directness        Int?     @default(50) // 0-100 scale
  encouragementLevel Int?    @default(70) // 0-100 scale
  coachingStyle     String?  @default("balanced") // analytical, motivational, balanced, reflective
  isActive          Boolean  @default(true)
  createdBy         String?  // userId of creator for custom coaches
}

model PsychProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  productivityTime    String   // morning, afternoon, evening, night
  communicationPref   String   // minimal, moderate, frequent
  taskApproach       String   // sequential, parallel, varied
  difficultyPreference String // first, alternate, end
  coachId            String?
  coach              Coach?    @relation(fields: [coachId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model Settings {
  id                String   @id @default(cuid())
  userId            String   @unique
  theme             String   @default("system")
  notifications     Boolean  @default(true)
  emailNotifications Boolean @default(true)
  timezone          String   @default("UTC")
  language          String   @default("en")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  pomodoroDuration     Int      @default(25)
  shortBreakDuration   Int      @default(5)
  longBreakDuration    Int      @default(15)
  soundEnabled         Boolean  @default(true)
  notificationsEnabled Boolean  @default(true)
  defaultReminderTime  Int      @default(0)
}

enum TaskPriority {
  low
  medium
  high
}

model Task {
  id                   String              @id @default(cuid())
  title                String
  description          String?             @db.Text
  date                 DateTime?
  deadline             DateTime?
  completed            Boolean             @default(false)
  stage                TaskStage           @default(Refinement)
  stageStatus          TaskStageStatus     @default(NotStarted)
  priority             TaskPriority        @default(medium)
  priorityReason       String?
  position             Int?
  tags                 Tag[]               @relation("TaskTags")
  estimatedTimeMinutes Int                @default(0)
  repeats              String?
  reminderTime         ReminderTimeOption? @default(at_time)
  location             String?
  why                  String?
  userId               String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  notifications        Notification[]
  pomodoros            Pomodoro[]          @relation("PomodoroTask")
  pomodoroTasks        Pomodoro[]          @relation("PomodoroTasks")
  user                 User                @relation(fields: [userId], references: [id])
  reward               Reward?
  points               Int                 @default(0)
  excuses              Excuse[]
  moods                Mood[]
  flashcards           Flashcard[]         @relation("TaskFlashcards")
  logs                 Log[]               @relation("TaskLogs")
  quiz                 Quiz?
  estimatedPomodoros   Int                 @default(1)
  calendarEvents       CalendarEvent[]
  isCalendarEvent      Boolean             @default(false)
  externalEventId      String?             // For tracking the source external event
  parentId             String?             // Link to parent task
  parent               Task?               @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade) // Cascade delete subtasks if parent is deleted
  children             Task[]              @relation("TaskHierarchy") // List of subtasks
  chatMessages         ChatMessage[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String?
  category    TagCategory? @relation(fields: [categoryId], references: [id])
  tasks       Task[]   @relation("TaskTags")
}

model TagCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType @default(Reminder)
  trigger   NotificationTrigger @default(RelativeTime)
  mode      NotificationMode @default(Push)
  message   String
  read      Boolean  @default(false)
  relativeTimeValue Int?
  relativeTimeUnit NotificationRelativeTimeUnit?
  fixedTime DateTime?
  userId    String
  taskId    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  task      Task?    @relation(fields: [taskId], references: [id])
  author    NotificationAuthor @default(User)
}

model Log {
  id        String   @id @default(cuid())
  type      LogType
  data      Json?
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  taskId    String?
  task      Task?    @relation("TaskLogs", fields: [taskId], references: [id])
  author    LogAuthor
}

model UserInsight {
  id        String   @id @default(cuid())
  type      String
  data      Json
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Pomodoro {
  id          String         @id @default(cuid())
  type        String         // focus, short_break, long_break
  status      String         @default("active") // active, finished, cancelled
  startTime   DateTime
  endTime     DateTime?
  taskId      String?
  taskMode    String?        @default("single") // single, multi, free
  settings    Json?          // Store user settings at the time of creation
  userId      String
  createdAt   DateTime       @default(now())
  task        Task?          @relation("PomodoroTask", fields: [taskId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
  tasks       Task[]         @relation("PomodoroTasks") // For multi-task pomodoros
}

model Reward {
  id          String    @id @default(cuid())
  name        String
  description String?
  points      Int       @default(0)
  claimed     Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  taskId      String?   @unique
  task        Task?     @relation(fields: [taskId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Streak {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  type      String
  count     Int         @default(0)
  lastDate  DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Excuse {
  id        String   @id @default(cuid())
  text      String
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model Mood {
  id        String   @id @default(cuid())
  value     Int      // 1-5 scale
  note      String?
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model Flashcard {
  id        String   @id @default(cuid())
  question  String
  answer    String
  userId    String
  taskId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  task      Task?    @relation("TaskFlashcards", fields: [taskId], references: [id])
}

model Quiz {
  id        String       @id @default(cuid())
  title     String
  userId    String
  taskId    String?      @unique
  questions QuizQuestion[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  task      Task?        @relation(fields: [taskId], references: [id])
}

model QuizQuestion {
  id        String   @id @default(cuid())
  question  String
  options   String[]
  answer    String
  quizId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model Competition {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation("CompetitionOwner", fields: [ownerId], references: [id])
  participants User[]  @relation("CompetitionParticipants")
}

model AccountabilityPartnership {
  id          String   @id @default(cuid())
  userId      String
  partnerId   String
  status      String   // pending, active, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("AccountabilityPartner", fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReminderTimeOption {
  at_time
  five_min_before
  fifteen_min_before
  thirty_min_before
  one_hour_before
  one_day_before
}

enum StreakType {
  daily_completion
  weekly_completion
  monthly_completion
}

enum LogType {
  user_created
  user_login
  user_logout
  user_settings_updated
  task_created
  task_updated
  task_deleted
  task_completed
  task_reactivated
  pomodoro_started
  pomodoro_completed
  pomodoro_cancelled
  reward_claimed
  streak_started
  streak_continued
  streak_broken
  streak_reset
  flash_card_created
  flash_card_reviewed
  quiz_started
  quiz_completed
  coach_feedback_received
  accountability_partnership_created
  tasks_prioritized
  query_asked
  query_answered
  ai_prompted
  reminder_created
  reminder_triggered
  reminder_dismissed
  app_opened
  app_closed
  settings_updated
  profile_updated
  user_register
}

enum LogAuthor {
    User
    Bot
    Model
    App
}

enum NotificationAuthor {
    User
    Bot
    Model
}

enum NotificationType {
  Reminder
  Question
  Info
}

enum NotificationTrigger {
    FixedTime
    RelativeTime
    Location
}

enum NotificationMode {
    Push
    Email
    Chat
}

enum NotificationRelativeTimeUnit {
  Minutes
  Hours
  Days
}

enum TaskStage {
  Refinement
  Breakdown
  Planning
  Execution
  Reflection
}

enum TaskStageStatus {
  NotStarted
  InProgress
  QuestionAsked
  Completed
}

enum CalendarProvider {
  google
  ical
  outlook
  apple
  custom
}

model CalendarConnection {
  id                String           @id @default(cuid())
  userId            String
  provider          CalendarProvider
  name              String?          // User-friendly name for this calendar
  isActive          Boolean          @default(true)
  accessToken       String?          @db.Text
  refreshToken      String?          @db.Text
  tokenExpiry       DateTime?
  calendarId        String?          // External calendar ID
  syncToken         String?          // For incremental sync
  lastSynced        DateTime?
  icalUrl           String?          // For iCalendar URL
  syncFrequency     String           @default("daily") // "realtime", "hourly", "daily"
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarEvents    CalendarEvent[]

  @@unique([userId, provider, calendarId])
}

model CalendarEvent {
  id                String            @id @default(cuid())
  externalId        String            // ID from external calendar
  title             String
  description       String?           @db.Text
  location          String?
  startTime         DateTime
  endTime           DateTime
  allDay            Boolean           @default(false)
  recurrence        String?           // RRULE string format
  status            String            @default("confirmed") // "confirmed", "tentative", "cancelled"
  lastModified      DateTime
  calendarConnectionId String
  calendarConnection CalendarConnection @relation(fields: [calendarConnectionId], references: [id], onDelete: Cascade)
  linkedTaskId      String?
  linkedTask        Task?             @relation(fields: [linkedTaskId], references: [id])
  externalData      Json?             // Store additional data from external calendar
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([calendarConnectionId, externalId])
}

model ChatMessage {
  id                String            @id @default(cuid())
  externalId        String?            
  content           String            @db.Text
  role              ChatMessageRole
  metadata          Json?             // Adding metadata field to store additional info
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  taskId            String?
  user              User              @relation(fields: [userId], references: [id])
  task              Task?             @relation(fields: [taskId], references: [id])
}

enum ChatMessageRole {
  user
  assistant
  system
}